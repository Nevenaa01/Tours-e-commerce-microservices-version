// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: tours/tours_service.proto

package tours

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TourService_CreateTour_FullMethodName         = "/TourService/CreateTour"
	TourService_GetTourById_FullMethodName        = "/TourService/GetTourById"
	TourService_GetToursByAuthorId_FullMethodName = "/TourService/GetToursByAuthorId"
	TourService_UpdateTour_FullMethodName         = "/TourService/UpdateTour"
	TourService_GetAll_FullMethodName             = "/TourService/GetAll"
)

// TourServiceClient is the client API for TourService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TourServiceClient interface {
	CreateTour(ctx context.Context, in *Tour, opts ...grpc.CallOption) (*Tour, error)
	GetTourById(ctx context.Context, in *GetTourRequest, opts ...grpc.CallOption) (*Tour, error)
	GetToursByAuthorId(ctx context.Context, in *GetToursByAuthorIdRequest, opts ...grpc.CallOption) (*GetToursByAuthorIdResponse, error)
	UpdateTour(ctx context.Context, in *Tour, opts ...grpc.CallOption) (*Tour, error)
	GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllResponse, error)
}

type tourServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTourServiceClient(cc grpc.ClientConnInterface) TourServiceClient {
	return &tourServiceClient{cc}
}

func (c *tourServiceClient) CreateTour(ctx context.Context, in *Tour, opts ...grpc.CallOption) (*Tour, error) {
	out := new(Tour)
	err := c.cc.Invoke(ctx, TourService_CreateTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetTourById(ctx context.Context, in *GetTourRequest, opts ...grpc.CallOption) (*Tour, error) {
	out := new(Tour)
	err := c.cc.Invoke(ctx, TourService_GetTourById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetToursByAuthorId(ctx context.Context, in *GetToursByAuthorIdRequest, opts ...grpc.CallOption) (*GetToursByAuthorIdResponse, error) {
	out := new(GetToursByAuthorIdResponse)
	err := c.cc.Invoke(ctx, TourService_GetToursByAuthorId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) UpdateTour(ctx context.Context, in *Tour, opts ...grpc.CallOption) (*Tour, error) {
	out := new(Tour)
	err := c.cc.Invoke(ctx, TourService_UpdateTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, TourService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TourServiceServer is the server API for TourService service.
// All implementations must embed UnimplementedTourServiceServer
// for forward compatibility
type TourServiceServer interface {
	CreateTour(context.Context, *Tour) (*Tour, error)
	GetTourById(context.Context, *GetTourRequest) (*Tour, error)
	GetToursByAuthorId(context.Context, *GetToursByAuthorIdRequest) (*GetToursByAuthorIdResponse, error)
	UpdateTour(context.Context, *Tour) (*Tour, error)
	GetAll(context.Context, *Empty) (*GetAllResponse, error)
	mustEmbedUnimplementedTourServiceServer()
}

// UnimplementedTourServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTourServiceServer struct {
}

func (UnimplementedTourServiceServer) CreateTour(context.Context, *Tour) (*Tour, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTour not implemented")
}
func (UnimplementedTourServiceServer) GetTourById(context.Context, *GetTourRequest) (*Tour, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTourById not implemented")
}
func (UnimplementedTourServiceServer) GetToursByAuthorId(context.Context, *GetToursByAuthorIdRequest) (*GetToursByAuthorIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToursByAuthorId not implemented")
}
func (UnimplementedTourServiceServer) UpdateTour(context.Context, *Tour) (*Tour, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTour not implemented")
}
func (UnimplementedTourServiceServer) GetAll(context.Context, *Empty) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedTourServiceServer) mustEmbedUnimplementedTourServiceServer() {}

// UnsafeTourServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TourServiceServer will
// result in compilation errors.
type UnsafeTourServiceServer interface {
	mustEmbedUnimplementedTourServiceServer()
}

func RegisterTourServiceServer(s grpc.ServiceRegistrar, srv TourServiceServer) {
	s.RegisterService(&TourService_ServiceDesc, srv)
}

func _TourService_CreateTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tour)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).CreateTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_CreateTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).CreateTour(ctx, req.(*Tour))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetTourById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetTourById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetTourById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetTourById(ctx, req.(*GetTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetToursByAuthorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetToursByAuthorIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetToursByAuthorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetToursByAuthorId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetToursByAuthorId(ctx, req.(*GetToursByAuthorIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_UpdateTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tour)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).UpdateTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_UpdateTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).UpdateTour(ctx, req.(*Tour))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TourService_ServiceDesc is the grpc.ServiceDesc for TourService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TourService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TourService",
	HandlerType: (*TourServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTour",
			Handler:    _TourService_CreateTour_Handler,
		},
		{
			MethodName: "GetTourById",
			Handler:    _TourService_GetTourById_Handler,
		},
		{
			MethodName: "GetToursByAuthorId",
			Handler:    _TourService_GetToursByAuthorId_Handler,
		},
		{
			MethodName: "UpdateTour",
			Handler:    _TourService_UpdateTour_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _TourService_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tours/tours_service.proto",
}

const (
	KeypointService_CreateTourKeypoint_FullMethodName = "/KeypointService/CreateTourKeypoint"
	KeypointService_GetByTourId_FullMethodName        = "/KeypointService/GetByTourId"
)

// KeypointServiceClient is the client API for KeypointService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeypointServiceClient interface {
	CreateTourKeypoint(ctx context.Context, in *Keypoint, opts ...grpc.CallOption) (*Keypoint, error)
	GetByTourId(ctx context.Context, in *GetTourRequest, opts ...grpc.CallOption) (*KeypointsResponse, error)
}

type keypointServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeypointServiceClient(cc grpc.ClientConnInterface) KeypointServiceClient {
	return &keypointServiceClient{cc}
}

func (c *keypointServiceClient) CreateTourKeypoint(ctx context.Context, in *Keypoint, opts ...grpc.CallOption) (*Keypoint, error) {
	out := new(Keypoint)
	err := c.cc.Invoke(ctx, KeypointService_CreateTourKeypoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keypointServiceClient) GetByTourId(ctx context.Context, in *GetTourRequest, opts ...grpc.CallOption) (*KeypointsResponse, error) {
	out := new(KeypointsResponse)
	err := c.cc.Invoke(ctx, KeypointService_GetByTourId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeypointServiceServer is the server API for KeypointService service.
// All implementations must embed UnimplementedKeypointServiceServer
// for forward compatibility
type KeypointServiceServer interface {
	CreateTourKeypoint(context.Context, *Keypoint) (*Keypoint, error)
	GetByTourId(context.Context, *GetTourRequest) (*KeypointsResponse, error)
	mustEmbedUnimplementedKeypointServiceServer()
}

// UnimplementedKeypointServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeypointServiceServer struct {
}

func (UnimplementedKeypointServiceServer) CreateTourKeypoint(context.Context, *Keypoint) (*Keypoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTourKeypoint not implemented")
}
func (UnimplementedKeypointServiceServer) GetByTourId(context.Context, *GetTourRequest) (*KeypointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByTourId not implemented")
}
func (UnimplementedKeypointServiceServer) mustEmbedUnimplementedKeypointServiceServer() {}

// UnsafeKeypointServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeypointServiceServer will
// result in compilation errors.
type UnsafeKeypointServiceServer interface {
	mustEmbedUnimplementedKeypointServiceServer()
}

func RegisterKeypointServiceServer(s grpc.ServiceRegistrar, srv KeypointServiceServer) {
	s.RegisterService(&KeypointService_ServiceDesc, srv)
}

func _KeypointService_CreateTourKeypoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Keypoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeypointServiceServer).CreateTourKeypoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeypointService_CreateTourKeypoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeypointServiceServer).CreateTourKeypoint(ctx, req.(*Keypoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeypointService_GetByTourId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeypointServiceServer).GetByTourId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeypointService_GetByTourId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeypointServiceServer).GetByTourId(ctx, req.(*GetTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeypointService_ServiceDesc is the grpc.ServiceDesc for KeypointService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeypointService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "KeypointService",
	HandlerType: (*KeypointServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTourKeypoint",
			Handler:    _KeypointService_CreateTourKeypoint_Handler,
		},
		{
			MethodName: "GetByTourId",
			Handler:    _KeypointService_GetByTourId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tours/tours_service.proto",
}
