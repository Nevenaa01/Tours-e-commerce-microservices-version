// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: followings/follower_service.proto

package followings

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FollowerService_GetFollowings_FullMethodName               = "/FollowerService/GetFollowings"
	FollowerService_CreateFollow_FullMethodName                = "/FollowerService/CreateFollow"
	FollowerService_DeleteFollow_FullMethodName                = "/FollowerService/DeleteFollow"
	FollowerService_GetAllRecommendedFollowings_FullMethodName = "/FollowerService/GetAllRecommendedFollowings"
)

// FollowerServiceClient is the client API for FollowerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowerServiceClient interface {
	GetFollowings(ctx context.Context, in *GetFollowRequest, opts ...grpc.CallOption) (*GetFollowResponse, error)
	CreateFollow(ctx context.Context, in *Follower, opts ...grpc.CallOption) (*Follower, error)
	DeleteFollow(ctx context.Context, in *DeleteFollowRequest, opts ...grpc.CallOption) (*Emptyy, error)
	GetAllRecommendedFollowings(ctx context.Context, in *GetFollowRequest, opts ...grpc.CallOption) (*GetFollowResponse, error)
}

type followerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowerServiceClient(cc grpc.ClientConnInterface) FollowerServiceClient {
	return &followerServiceClient{cc}
}

func (c *followerServiceClient) GetFollowings(ctx context.Context, in *GetFollowRequest, opts ...grpc.CallOption) (*GetFollowResponse, error) {
	out := new(GetFollowResponse)
	err := c.cc.Invoke(ctx, FollowerService_GetFollowings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) CreateFollow(ctx context.Context, in *Follower, opts ...grpc.CallOption) (*Follower, error) {
	out := new(Follower)
	err := c.cc.Invoke(ctx, FollowerService_CreateFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) DeleteFollow(ctx context.Context, in *DeleteFollowRequest, opts ...grpc.CallOption) (*Emptyy, error) {
	out := new(Emptyy)
	err := c.cc.Invoke(ctx, FollowerService_DeleteFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) GetAllRecommendedFollowings(ctx context.Context, in *GetFollowRequest, opts ...grpc.CallOption) (*GetFollowResponse, error) {
	out := new(GetFollowResponse)
	err := c.cc.Invoke(ctx, FollowerService_GetAllRecommendedFollowings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowerServiceServer is the server API for FollowerService service.
// All implementations must embed UnimplementedFollowerServiceServer
// for forward compatibility
type FollowerServiceServer interface {
	GetFollowings(context.Context, *GetFollowRequest) (*GetFollowResponse, error)
	CreateFollow(context.Context, *Follower) (*Follower, error)
	DeleteFollow(context.Context, *DeleteFollowRequest) (*Emptyy, error)
	GetAllRecommendedFollowings(context.Context, *GetFollowRequest) (*GetFollowResponse, error)
	mustEmbedUnimplementedFollowerServiceServer()
}

// UnimplementedFollowerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFollowerServiceServer struct {
}

func (UnimplementedFollowerServiceServer) GetFollowings(context.Context, *GetFollowRequest) (*GetFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowings not implemented")
}
func (UnimplementedFollowerServiceServer) CreateFollow(context.Context, *Follower) (*Follower, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFollow not implemented")
}
func (UnimplementedFollowerServiceServer) DeleteFollow(context.Context, *DeleteFollowRequest) (*Emptyy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFollow not implemented")
}
func (UnimplementedFollowerServiceServer) GetAllRecommendedFollowings(context.Context, *GetFollowRequest) (*GetFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRecommendedFollowings not implemented")
}
func (UnimplementedFollowerServiceServer) mustEmbedUnimplementedFollowerServiceServer() {}

// UnsafeFollowerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowerServiceServer will
// result in compilation errors.
type UnsafeFollowerServiceServer interface {
	mustEmbedUnimplementedFollowerServiceServer()
}

func RegisterFollowerServiceServer(s grpc.ServiceRegistrar, srv FollowerServiceServer) {
	s.RegisterService(&FollowerService_ServiceDesc, srv)
}

func _FollowerService_GetFollowings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).GetFollowings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_GetFollowings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).GetFollowings(ctx, req.(*GetFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_CreateFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Follower)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).CreateFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_CreateFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).CreateFollow(ctx, req.(*Follower))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_DeleteFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).DeleteFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_DeleteFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).DeleteFollow(ctx, req.(*DeleteFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_GetAllRecommendedFollowings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).GetAllRecommendedFollowings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_GetAllRecommendedFollowings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).GetAllRecommendedFollowings(ctx, req.(*GetFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowerService_ServiceDesc is the grpc.ServiceDesc for FollowerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FollowerService",
	HandlerType: (*FollowerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFollowings",
			Handler:    _FollowerService_GetFollowings_Handler,
		},
		{
			MethodName: "CreateFollow",
			Handler:    _FollowerService_CreateFollow_Handler,
		},
		{
			MethodName: "DeleteFollow",
			Handler:    _FollowerService_DeleteFollow_Handler,
		},
		{
			MethodName: "GetAllRecommendedFollowings",
			Handler:    _FollowerService_GetAllRecommendedFollowings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "followings/follower_service.proto",
}
